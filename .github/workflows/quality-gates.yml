name: Quality Gates & Security Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_call:
    inputs:
      coverage_threshold:
        description: 'Minimum coverage percentage required'
        required: false
        default: '85.0'
        type: string
      fail_on_security_issues:
        description: 'Fail on high severity security issues'
        required: false
        default: true
        type: boolean

env:
  COVERAGE_THRESHOLD: ${{ inputs.coverage_threshold || '85.0' }}

jobs:
  # ================================================================
  # BACKEND QUALITY GATES
  # ================================================================
  backend-quality-gates:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/') || github.event_name == 'pull_request'
    
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.passed }}
      coverage: ${{ steps.quality-check.outputs.coverage }}
      security-passed: ${{ steps.security-check.outputs.passed }}
      
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
        
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: üì¶ Install dependencies
        run: |
          cd backend
          pip install -r requirements-test.txt
          pip install -e .
          
      - name: üß™ Run comprehensive tests
        id: test-run
        run: |
          cd backend
          python scripts/run_tests.py \
            --coverage-threshold=${{ env.COVERAGE_THRESHOLD }} \
            2>&1 | tee test_output.log
          
      - name: ‚úÖ Quality Gate Check
        id: quality-check
        run: |
          cd backend
          
          if [ ! -f test_report.json ]; then
            echo "‚ùå Test report not found"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Parse test results
          OVERALL_SUCCESS=$(cat test_report.json | jq -r '.summary.overall_success')
          COVERAGE=$(cat test_report.json | jq -r '.results.unit_tests.details.coverage_percent // 0')
          PASSED_TESTS=$(cat test_report.json | jq -r '.summary.passed_tests')
          TOTAL_TESTS=$(cat test_report.json | jq -r '.summary.total_tests')
          
          echo "Coverage: $COVERAGE%"
          echo "Tests: $PASSED_TESTS/$TOTAL_TESTS passed"
          
          # Check overall success
          if [ "$OVERALL_SUCCESS" != "true" ]; then
            echo "‚ùå Quality Gate FAILED - Tests did not pass"
            echo "Test Summary:"
            cat test_report.json | jq '.summary'
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check coverage threshold
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "‚ùå Quality Gate FAILED - Coverage $COVERAGE% below ${{ env.COVERAGE_THRESHOLD }}% threshold"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Quality Gate PASSED"
          echo "‚úÖ Coverage: $COVERAGE% (threshold: ${{ env.COVERAGE_THRESHOLD }}%)"
          echo "‚úÖ Tests: $PASSED_TESTS/$TOTAL_TESTS passed"
          
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          
      - name: üîí Security Gate Check
        id: security-check
        run: |
          cd backend
          
          # Check Bandit results
          if [ -f bandit_results.json ]; then
            HIGH_ISSUES=$(cat bandit_results.json | jq -r '.results[] | select(.issue_severity == "HIGH") | length' | wc -l)
            MEDIUM_ISSUES=$(cat bandit_results.json | jq -r '.results[] | select(.issue_severity == "MEDIUM") | length' | wc -l)
            
            echo "Security Issues - High: $HIGH_ISSUES, Medium: $MEDIUM_ISSUES"
            
            if [ "$HIGH_ISSUES" -gt 0 ] && [ "${{ inputs.fail_on_security_issues }}" == "true" ]; then
              echo "‚ùå Security Gate FAILED - $HIGH_ISSUES high severity security issues found"
              cat bandit_results.json | jq '.results[] | select(.issue_severity == "HIGH")'
              echo "passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          # Check Safety results  
          if [ -f safety_results.json ]; then
            VULNERABILITIES=$(cat safety_results.json | jq '. | length')
            echo "Dependency vulnerabilities: $VULNERABILITIES"
            
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "‚ö†Ô∏è Security Warning - $VULNERABILITIES dependency vulnerabilities found"
              cat safety_results.json | jq '.'
            fi
          fi
          
          echo "‚úÖ Security Gate PASSED"
          echo "passed=true" >> $GITHUB_OUTPUT
          
      - name: üìä Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-quality-reports
          path: |
            backend/test_report.json
            backend/coverage.xml
            backend/htmlcov/
            backend/bandit_results.json
            backend/safety_results.json
            backend/test_output.log
            
      - name: üìà Coverage Badge
        if: steps.quality-check.outputs.passed == 'true'
        run: |
          cd backend
          COVERAGE=${{ steps.quality-check.outputs.coverage }}
          COLOR="red"
          if (( $(echo "$COVERAGE >= 85" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
            COLOR="yellow"
          fi
          
          curl -s "https://img.shields.io/badge/Coverage-${COVERAGE}%25-${COLOR}" > coverage-badge.svg
          
      - name: üí¨ Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            let report = '';
            try {
              const testReport = JSON.parse(fs.readFileSync('backend/test_report.json', 'utf8'));
              const coverage = testReport.results.unit_tests.details.coverage_percent;
              const passed = testReport.summary.passed_tests;
              const total = testReport.summary.total_tests;
              
              const qualityPassed = '${{ steps.quality-check.outputs.passed }}' === 'true';
              const securityPassed = '${{ steps.security-check.outputs.passed }}' === 'true';
              
              report = `## üß™ Backend Quality Gates Report
              
              ${qualityPassed ? '‚úÖ' : '‚ùå'} **Quality Gate**: ${qualityPassed ? 'PASSED' : 'FAILED'}
              ${securityPassed ? '‚úÖ' : '‚ùå'} **Security Gate**: ${securityPassed ? 'PASSED' : 'FAILED'}
              
              ### üìä Test Results
              - **Tests**: ${passed}/${total} passed
              - **Coverage**: ${coverage}% (threshold: ${{ env.COVERAGE_THRESHOLD }}%)
              - **Quality Checks**: ${qualityPassed ? 'All passed' : 'Failed'}
              - **Security Issues**: ${securityPassed ? 'None found' : 'Issues detected'}
              
              ${qualityPassed && securityPassed ? 
                'üöÄ **Ready for deployment!**' : 
                'üö´ **Deployment blocked** - Fix quality/security issues before merge'}
              `;
            } catch (e) {
              report = '‚ùå Unable to parse test results';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # ================================================================
  # FRONTEND QUALITY GATES  
  # ================================================================
  frontend-quality-gates:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'frontend/') || github.event_name == 'pull_request'
    
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.passed }}
      coverage: ${{ steps.quality-check.outputs.coverage }}
      
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: üì¶ Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: üß™ Run comprehensive tests
        id: test-run
        run: |
          cd frontend
          npm run test:ci 2>&1 | tee test_output.log
          
      - name: ‚úÖ Quality Gate Check
        id: quality-check
        run: |
          cd frontend
          
          # Check Jest coverage
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
            echo "Coverage: $COVERAGE%"
            
            if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
              echo "‚ùå Quality Gate FAILED - Coverage $COVERAGE% below ${{ env.COVERAGE_THRESHOLD }}% threshold"
              echo "passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "‚ùå Coverage report not found"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check ESLint results
          npm run lint 2>&1 | tee lint_output.log
          LINT_EXIT_CODE=$?
          
          if [ $LINT_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Quality Gate FAILED - ESLint errors found"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check type checking
          npm run type-check 2>&1 | tee typecheck_output.log
          TYPECHECK_EXIT_CODE=$?
          
          if [ $TYPECHECK_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Quality Gate FAILED - TypeScript errors found"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Quality Gate PASSED"
          echo "‚úÖ Coverage: $COVERAGE% (threshold: ${{ env.COVERAGE_THRESHOLD }}%)"
          echo "‚úÖ ESLint: No errors"
          echo "‚úÖ TypeScript: No errors"
          
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          
      - name: üîí Security Check
        run: |
          cd frontend
          
          # NPM audit
          npm audit --audit-level=moderate --json > audit_results.json || true
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat audit_results.json | jq -r '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit_results.json | jq -r '.metadata.vulnerabilities.critical // 0')
          
          echo "Security vulnerabilities - Critical: $CRITICAL_VULNS, High: $HIGH_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ö†Ô∏è Security Warning - High/Critical vulnerabilities found"
            cat audit_results.json | jq '.vulnerabilities'
          fi
          
      - name: üé≠ E2E Tests
        run: |
          cd frontend
          npm run test:e2e:ci || echo "E2E tests failed (non-blocking)"
          
      - name: üìä Upload test artifacts  
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-quality-reports
          path: |
            frontend/coverage/
            frontend/test_output.log
            frontend/lint_output.log
            frontend/typecheck_output.log
            frontend/audit_results.json
            frontend/test-results.xml

  # ================================================================
  # DEPLOYMENT GATE
  # ================================================================  
  deployment-gate:
    runs-on: ubuntu-latest
    needs: [backend-quality-gates, frontend-quality-gates]
    if: always()
    
    outputs:
      deployment-allowed: ${{ steps.gate-check.outputs.allowed }}
      
    steps:
      - name: üö¶ Deployment Gate Check
        id: gate-check
        run: |
          BACKEND_PASSED="${{ needs.backend-quality-gates.outputs.quality-passed }}"
          FRONTEND_PASSED="${{ needs.frontend-quality-gates.outputs.quality-passed }}"
          BACKEND_SECURITY="${{ needs.backend-quality-gates.outputs.security-passed }}"
          
          echo "Backend Quality: $BACKEND_PASSED"
          echo "Frontend Quality: $FRONTEND_PASSED"  
          echo "Backend Security: $BACKEND_SECURITY"
          
          # Check if deployment should be allowed
          if [ "$BACKEND_PASSED" == "true" ] && [ "$FRONTEND_PASSED" == "true" ] && [ "$BACKEND_SECURITY" == "true" ]; then
            echo "‚úÖ DEPLOYMENT ALLOWED - All quality gates passed"
            echo "allowed=true" >> $GITHUB_OUTPUT
          else
            echo "üö´ DEPLOYMENT BLOCKED - Quality gates failed"
            echo "allowed=false" >> $GITHUB_OUTPUT
            
            # Detailed failure reasons
            [ "$BACKEND_PASSED" != "true" ] && echo "- Backend quality checks failed"
            [ "$FRONTEND_PASSED" != "true" ] && echo "- Frontend quality checks failed"  
            [ "$BACKEND_SECURITY" != "true" ] && echo "- Backend security checks failed"
            
            exit 1
          fi
          
      - name: üìä Quality Summary
        run: |
          echo "## üéØ Quality Gates Summary"
          echo ""
          echo "| Component | Quality | Coverage | Security |"
          echo "|-----------|---------|----------|----------|"
          echo "| Backend   | ${{ needs.backend-quality-gates.outputs.quality-passed == 'true' && '‚úÖ' || '‚ùå' }} | ${{ needs.backend-quality-gates.outputs.coverage }}% | ${{ needs.backend-quality-gates.outputs.security-passed == 'true' && '‚úÖ' || '‚ùå' }} |"
          echo "| Frontend  | ${{ needs.frontend-quality-gates.outputs.quality-passed == 'true' && '‚úÖ' || '‚ùå' }} | ${{ needs.frontend-quality-gates.outputs.coverage }}% | ‚úÖ |"
          echo ""
          echo "**Deployment Status:** ${{ steps.gate-check.outputs.allowed == 'true' && 'üöÄ APPROVED' || 'üö´ BLOCKED' }}"
          
      - name: üö® Notify Quality Gate Failure
        if: steps.gate-check.outputs.allowed != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Quality gates failed - deployment blocked until issues are resolved');

  # ================================================================
  # PERFORMANCE TESTS
  # ================================================================
  performance-tests:
    runs-on: ubuntu-latest
    needs: [deployment-gate]
    if: needs.deployment-gate.outputs.deployment-allowed == 'true'
    
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
        
      - name: üèóÔ∏è Build and start services
        run: |
          docker-compose -f docker/docker-compose.yml up -d
          sleep 30
          
      - name: üöÄ Lighthouse Performance Test
        run: |
          npm install -g lighthouse
          lighthouse http://localhost:3000 \
            --output json \
            --output-path lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox"
            
      - name: üìä Performance Gate Check
        run: |
          PERFORMANCE_SCORE=$(cat lighthouse-report.json | jq -r '.categories.performance.score * 100')
          echo "Performance Score: $PERFORMANCE_SCORE"
          
          if (( $(echo "$PERFORMANCE_SCORE < 80" | bc -l) )); then
            echo "‚ö†Ô∏è Performance Warning - Score below 80"
          else
            echo "‚úÖ Performance Check Passed"
          fi
          
      - name: üìä Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: lighthouse-report.json 